# -*- makefile -*-

SHELL = /bin/sh

VPATH = $(SRCDIR)

# Binary utilities.
# Try to guess what prefix RISC-V cross-tools use.

TOOLPREFIX = riscv64-unknown-elf-

ifneq ($(strip $(shell command -v riscv64-unknown-elf-gcc -march=rv32gc -mabi=ilp32 2> /dev/null)),)
  TOOLPREFIX = riscv64-unknown-elf-
else ifneq ($(strip $(shell command -v riscv64-linux-gnu-gcc -march=rv32gc -mabi=ilp32 2> /dev/null)),)
  TOOLPREFIX = riscv64-linux-gnu-
else ifneq ($(strip $(shell command -v riscv64-unknown-linux-gnu-gcc -march=rv32gc -mabi=ilp32 2> /dev/null)),)
  TOOLPREFIX = riscv64-unknown-linux-gnu-
else ifneq ($(strip $(shell command -v riscv32-unknown-elf-gcc -march=rv32gc -mabi=ilp32 2> /dev/null)),)
  TOOLPREFIX = riscv32-unknown-elf-
else ifneq ($(strip $(shell command -v riscv32-linux-gnu-gcc -march=rv32gc -mabi=ilp32 2> /dev/null)),)
  TOOLPREFIX = riscv32-linux-gnu-
else ifneq ($(strip $(shell command -v riscv32-unknown-linux-gnu-gcc -march=rv32gc -mabi=ilp32 2> /dev/null)),)
  TOOLPREFIX = riscv32-unknown-linux-gnu-
endif

CC = $(TOOLPREFIX)gcc -march=rv32gc -mabi=ilp32
LD = $(TOOLPREFIX)ld -m elf32lriscv
OBJCOPY = $(TOOLPREFIX)objcopy

ifeq ($(strip $(shell command -v $(CC) 2> /dev/null)),)
$(warning *** Compiler ($(CC)) not found.  Did you set $$PATH properly?  Please refer to the Getting Started section in the documentation for details. ***)
endif

# Compiler and assembler invocation.
DEFINES =
WARNINGS = -Wall -W -Wstrict-prototypes -Wmissing-prototypes -Wsystem-headers
CFLAGS = -ggdb3 -O0 -fno-pic -ffreestanding -fno-omit-frame-pointer -fno-common -nostartfiles -nostdlib -nodefaultlibs -mcmodel=medany -mno-relax -fno-pie
CPPFLAGS = -nostdinc -I$(SRCDIR) -I$(SRCDIR)/lib
ASFLAGS = -Wa,--gstabs
LDFLAGS = -z noseparate-code
DEPS = -MMD -MF $(@:.o=.d)

# Turn off -fstack-protector, which we don't support.
ifeq ($(strip $(shell echo | $(CC) -fno-stack-protector -E - > /dev/null 2>&1; echo $$?)),0)
CFLAGS += -fno-stack-protector
endif

# Turn off --build-id in the linker, which confuses the Pintos loader.
ifeq ($(strip $(shell $(LD) --help | grep -q build-id; echo $$?)),0)
LDFLAGS += -Wl,--build-id=none
endif

%.o: %.c
	$(CC) -c $< -o $@ $(CFLAGS) $(CPPFLAGS) $(WARNINGS) $(DEFINES) $(DEPS)

%.o: %.S
	$(CC) -c $< -o $@ $(ASFLAGS) $(CPPFLAGS) $(DEFINES) $(DEPS)

%_M.o: %.c
	$(CC) -c $< -o $@ $(CFLAGS) $(CPPFLAGS) $(WARNINGS) $(DEFINES) $(DEPS)

%_M.o: %.S
	$(CC) -c $< -o $@ $(ASFLAGS) $(CPPFLAGS) $(DEFINES) $(DEPS)
